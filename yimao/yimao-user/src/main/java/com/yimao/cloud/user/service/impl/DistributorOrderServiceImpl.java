package com.yimao.cloud.user.service.impl;import com.github.pagehelper.Page;import com.github.pagehelper.PageHelper;import com.yimao.cloud.base.cache.UserCache;import com.yimao.cloud.base.constant.Constant;import com.yimao.cloud.base.constant.RabbitConstant;import com.yimao.cloud.base.enums.CreateDistributorTerminal;import com.yimao.cloud.base.enums.DistributorOrderStateEnum;import com.yimao.cloud.base.enums.DistributorOrderType;import com.yimao.cloud.base.enums.DistributorProtocolSignStateEnum;import com.yimao.cloud.base.enums.DistributorRoleLevel;import com.yimao.cloud.base.enums.EnterpriseStateEnum;import com.yimao.cloud.base.enums.FinancialStateEnum;import com.yimao.cloud.base.enums.PayStateEnum;import com.yimao.cloud.base.enums.PayType;import com.yimao.cloud.base.enums.StationAreaServiceTypeEnum;import com.yimao.cloud.base.enums.UserChangeRecordEnum;import com.yimao.cloud.base.enums.UserType;import com.yimao.cloud.base.exception.BadRequestException;import com.yimao.cloud.base.exception.NoLoginException;import com.yimao.cloud.base.exception.NotFoundException;import com.yimao.cloud.base.exception.YimaoException;import com.yimao.cloud.base.utils.BeanHelper;import com.yimao.cloud.base.utils.CollectionUtil;import com.yimao.cloud.base.utils.DateUtil;import com.yimao.cloud.base.utils.SFTPUtil;import com.yimao.cloud.base.utils.StringUtil;import com.yimao.cloud.base.utils.UUIDUtil;import com.yimao.cloud.framework.cache.RedisCache;import com.yimao.cloud.pojo.dto.order.AgentSalesOverviewDTO;import com.yimao.cloud.pojo.dto.order.PayRecordDTO;import com.yimao.cloud.pojo.dto.order.RenewDTO;import com.yimao.cloud.pojo.dto.order.SalesStatsDTO;import com.yimao.cloud.pojo.dto.order.SalesStatsQueryDTO;import com.yimao.cloud.pojo.dto.order.SalesStatsResultDTO;import com.yimao.cloud.pojo.dto.station.FlowStatisticsDTO;import com.yimao.cloud.pojo.dto.system.StationCompanyDTO;import com.yimao.cloud.pojo.dto.user.DistributorDTO;import com.yimao.cloud.pojo.dto.user.DistributorOrderAllInfoDTO;import com.yimao.cloud.pojo.dto.user.DistributorOrderDTO;import com.yimao.cloud.pojo.dto.user.DistributorOrderExportDTO;import com.yimao.cloud.pojo.dto.user.DistributorProtocolDTO;import com.yimao.cloud.pojo.dto.user.DistributorRoleDTO;import com.yimao.cloud.pojo.dto.user.FinancialAuditDTO;import com.yimao.cloud.pojo.dto.user.SalePerformRankDTO;import com.yimao.cloud.pojo.dto.user.UserCompanyApplyDTO;import com.yimao.cloud.pojo.dto.user.UserDTO;import com.yimao.cloud.pojo.query.station.StatisticsQuery;import com.yimao.cloud.pojo.query.user.DistributorOrderQueryDTO;import com.yimao.cloud.pojo.vo.PageVO;import com.yimao.cloud.pojo.vo.station.DistributorOrderVO;import com.yimao.cloud.user.feign.OrderFeign;import com.yimao.cloud.user.feign.SystemFeign;import com.yimao.cloud.user.mapper.DistributorMapper;import com.yimao.cloud.user.mapper.DistributorOrderMapper;import com.yimao.cloud.user.mapper.DistributorProtocolMapper;import com.yimao.cloud.user.mapper.FinancialAuditMapper;import com.yimao.cloud.user.mapper.UserChangeMapper;import com.yimao.cloud.user.mapper.UserCompanyApplyMapper;import com.yimao.cloud.user.mapper.UserCompanyMapper;import com.yimao.cloud.user.mapper.UserDistributorApplyMapper;import com.yimao.cloud.user.mapper.UserMapper;import com.yimao.cloud.user.po.Distributor;import com.yimao.cloud.user.po.DistributorOrder;import com.yimao.cloud.user.po.DistributorProtocol;import com.yimao.cloud.user.po.User;import com.yimao.cloud.user.po.UserChangeRecord;import com.yimao.cloud.user.po.UserCompany;import com.yimao.cloud.user.po.UserCompanyApply;import com.yimao.cloud.user.po.UserDistributorApply;import com.yimao.cloud.user.service.DistributorOrderService;import com.yimao.cloud.user.service.DistributorProtocolService;import com.yimao.cloud.user.service.DistributorRoleService;import com.yimao.cloud.user.service.DistributorService;import com.yimao.cloud.user.service.UserCompanyApplyService;import com.yimao.cloud.user.service.UserCompanyService;import lombok.extern.slf4j.Slf4j;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import tk.mybatis.mapper.entity.Example;import javax.annotation.Resource;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Calendar;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Objects;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * @author Liu Yi * @description 经销商订单 * @date 2019/9/2 10:46 */@Service@Slf4jpublic class DistributorOrderServiceImpl implements DistributorOrderService {    @Resource    private DistributorOrderMapper distributorOrderMapper;    @Resource    private UserCompanyService userCompanyService;    @Resource    private UserCompanyApplyService userCompanyApplyService;    @Resource    private DistributorService distributorService;    @Resource    private DistributorMapper distributorMapper;    @Resource    private UserMapper userMapper;    @Resource    private DistributorRoleService distributorRoleService;    @Resource    private FinancialAuditMapper financialAuditMapper;    @Resource    private DistributorProtocolService distributorProtocolService;    @Resource    private UserCache userCache;    @Resource    private UserDistributorApplyMapper userDistributorApplyMapper;    @Resource    private RabbitTemplate rabbitTemplate;    @Resource    private UserCompanyApplyMapper userCompanyApplyMapper;    @Resource    private UserCompanyMapper userCompanyMapper;    @Resource    private DistributorProtocolMapper distributorProtocolMapper;    @Resource    private UserChangeMapper userChangeMapper;    @Resource    private SystemFeign systemFeign;    @Resource    private OrderFeign orderFeign;    @Resource    private RedisCache redisCache;    /**     * @param     * @return void     * @description 后台新增经销商订单     * @author Liu Yi     * @date 2019/8/23 14:32     */    @Override    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)    public DistributorOrder insertOrderBySystem(DistributorOrderDTO order) {        if (order == null) {            throw new BadRequestException("缺少经销商订单信息！");        }        if (order.getOrderType() == null) {            throw new BadRequestException("缺少经销商订单类型参数！");        }        if (DistributorOrderType.REGISTER.value != order.getOrderType()) {//订单类型/0-注册、1-升级、2-续费            throw new BadRequestException("订单类型有误！");        }        if (order.getOrderSouce() == null) {            throw new BadRequestException("缺少经销商订单来源参数！");        }        if (order.getOrderSouce() != 2) {//订单来源/0-H5页面、1-经销商app、2-翼猫业务系统            throw new BadRequestException("订单来源有误！");        }        if (order.getDistributorId() == null) {            throw new BadRequestException("缺少经销商信息参数！");        }        if (order.getRoleLevel() == null) {            throw new BadRequestException("缺少续费经销商类型信息！");        }        Distributor distributor = distributorMapper.selectByPrimaryKey(order.getDistributorId());        if (distributor == null) {            throw new YimaoException("经销商信息不存在！");        }        DistributorOrder distributorOrder = new DistributorOrder(order);        //赋值服务站信息        distributorOrderSetStationCompanyIdAndName(distributorOrder, distributor.getProvince(), distributor.getCity(), distributor.getRegion());        distributorOrder.setId(UUIDUtil.buildRegisterWorkOrderId());        //冗余字段 审核导出需要        distributorOrder.setRecommendId(distributor.getRecommendId());        distributorOrder.setRecommendName(distributor.getRecommendName());        distributorOrder.setDistributorIdCard(distributor.getIdCard());        distributorOrder.setProvince(distributor.getProvince());        distributorOrder.setCity(distributor.getCity());        distributorOrder.setRegion(distributor.getRegion());        distributorOrder.setAddress(distributor.getAddress());        distributorOrder.setRealName(distributor.getRealName());        //设置区域ID，站务系统用此字段区分所属服务站        Integer areaId = redisCache.get(Constant.AREA_CACHE + distributor.getProvince() + "_" + distributor.getCity() + "_" + distributor.getRegion(), Integer.class);        if (areaId == null) {            areaId = systemFeign.getRegionIdByPCR(distributor.getProvince(), distributor.getCity(), distributor.getRegion());        }        distributorOrder.setAreaId(areaId);        DistributorRoleDTO origRole = distributorRoleService.getByLevel(distributorOrder.getRoleLevel());        if (origRole == null) {            throw new YimaoException("经销商类型不存在!");        }        if (DistributorRoleLevel.D_950.value == order.getRoleLevel()) {            if (order.getUserCompanyApply() == null) {                throw new YimaoException("注册企业版本需要填写企业资料！");            }            //创建企业申请信息（后台详情需要）            UserCompanyApply userCompanyApply = new UserCompanyApply(order.getUserCompanyApply());            userCompanyApply.setCreateTime(new Date());            userCompanyApply.setOrderId(distributorOrder.getId());            userCompanyApplyService.insert(userCompanyApply);            //后台企业信息            UserCompany userCompany = BeanHelper.copyProperties(userCompanyApply, UserCompany.class);            userCompany.setId(null);            userCompany.setCreateTime(new Date());            userCompanyService.insert(userCompany);            Distributor distributorTemp = new Distributor();            distributorTemp.setId(distributor.getId());            distributorTemp.setCompanyId(userCompany.getId());            distributorTemp.setCompanyName(userCompany.getCompanyName());            //保存经销商企业信息信息            distributorMapper.updateByPrimaryKeySelective(distributorTemp);            // //用户信息中添加企业信息            // User user = userMapper.selectByPrimaryKey(distributor.getUserId());            // user.setCompanyName(userCompany.getCompanyName());            // userMapper.updateByPrimaryKeySelective(user);        }        distributorOrder.setRoleId(origRole.getId());        distributorOrder.setRoleLevel(origRole.getLevel());        distributorOrder.setPrice(order.getPrice());        distributorOrder.setQuotaNumber(origRole.getWaterDeviceQuota());        //判断传入的参数是否带支付状态                if (Objects.isNull(order.getPayState())) {            distributorOrder.setPayState(PayStateEnum.PAY.value);        } else {            distributorOrder.setPayState(order.getPayState());        }        distributorOrder.setFinancialState(FinancialStateEnum.NO_NEED_AUDIT.value);        distributorOrder.setEnterpriseState(EnterpriseStateEnum.NO_NEED_AUDIT.value);        //订单设置为完成        completeOrder(distributorOrder);        distributorOrder.setDistributorAccount(distributor.getUserName());        distributorOrder.setCreateTime(new Date());        int result = distributorOrderMapper.insert(distributorOrder);        if (result < 1) {            throw new YimaoException("经销商订单操作失败");        }        //收益收益分配,为0的后台订单不计入收益分配        if (distributorOrder.getPrice().compareTo(BigDecimal.ZERO) != 0) {            try {                DistributorOrderDTO distributorOrderDTO = new DistributorOrderDTO();                distributorOrder.convert(distributorOrderDTO);                DistributorDTO distributorDTO = distributorService.getBasicInfoById(distributorOrder.getDistributorId());                distributorOrderDTO.setDistributor(distributorDTO);                User user = userMapper.selectByPrimaryKey(distributor.getUserId());                UserDTO userDTO = new UserDTO();                userInfoConvert(user, userDTO);                distributorOrderDTO.setUser(userDTO);                DistributorDTO recommendDistributor = distributorService.getRecommendByDistributorId(distributor.getId());                distributorOrderDTO.setRecommendDistributor(recommendDistributor);                //招商收益分配                orderFeign.serviceAllot(distributorOrderDTO);            } catch (Exception e) {                throw new YimaoException("招商收益分配失败，经销商订单id：" + distributorOrder.getId());            }        }        return distributorOrder;    }    private void userInfoConvert(User user, UserDTO userDTO) {        userDTO.setId(user.getId());        userDTO.setUserName(user.getUserName());        userDTO.setMobile(user.getMobile());    }    /**     * @param     * @return void     * @description 更新经销商订单     * @author Liu Yi     * @date 2019/8/23 14:32     */    @Override    public void updateOrder(DistributorOrderDTO dto) {        if (dto == null) {            throw new BadRequestException("缺少经销商订单信息！");        }        DistributorOrder order = new DistributorOrder(dto);        distributorOrderMapper.updateByPrimaryKeySelective(order);    }    /**     * 升级经销商订单     *     * @param orderDTO     * @return     * @author Liu Yi     * @date 2019/1/9     */    @Override    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)    public Map<String, Object> upgradeOrder(DistributorOrderDTO orderDTO) {        if (orderDTO == null) {            throw new YimaoException("缺少经销商订单信息！");        }        if (orderDTO.getOrderType() == null) {            throw new YimaoException("缺少经销商订单类型参数！");        }        if (orderDTO.getOrderSouce() == null) {            throw new YimaoException("缺少经销商订单来源参数！");        }        if (orderDTO.getDistributorId() == null) {            throw new YimaoException("缺少经销商信息参数！");        }        if (DistributorOrderType.UPGRADE.value != orderDTO.getOrderType()) {//订单类型/0-注册、1-升级、2-续费            throw new YimaoException("订单类型有误！");        }        Distributor distributor = distributorMapper.selectByPrimaryKey(orderDTO.getDistributorId());        if (distributor == null) {            throw new YimaoException("经销商信息不存在！");        }        Map<String, Object> resultMap = new HashMap<>();        //查询该用户未完成的订单        List<DistributorOrderDTO> unfinishedUpgradeOrder = listByDistributorAccount(distributor.getUserName(), DistributorOrderType.UPGRADE.value);        if (CollectionUtil.isNotEmpty(unfinishedUpgradeOrder)) {            log.info("用户还有未完成的升级订单,直接返回老订单");            resultMap.put("orderId", unfinishedUpgradeOrder.get(0).getId().toString()); //一般情况下最多只会有一个未完成的升级订单            return resultMap;        }        if (orderDTO.getRoleLevel() == null) {            throw new YimaoException("缺少原经销商角色信息!");        }        if (orderDTO.getDestRoleLevel() == null) {            throw new YimaoException("缺少需要升级经销商角色信息!");        }        if (orderDTO.getRoleLevel() == DistributorRoleLevel.DISCOUNT.value) {            throw new YimaoException("折机版经销商不能升级");        }        DistributorRoleDTO origRole = distributorRoleService.getByLevel(orderDTO.getRoleLevel());        if (origRole == null) {            throw new YimaoException("原经销商类型不存在!");        }        if (!Objects.equals(origRole.getId(), distributor.getRoleId())) {            throw new YimaoException("经销商身份不相符!");        }        if (origRole.getForbidden()) {            throw new YimaoException("该经销商类型不可以升级!");        }        DistributorRoleDTO destRole = distributorRoleService.getByLevel(orderDTO.getDestRoleLevel());        if (destRole == null) {            throw new YimaoException("升级经销商类型不存在!");        }        //原经销商类型的价格        Integer quotaNumber;        //升级经销商价格        BigDecimal destPrice;        //原经销商类型的配额        Integer origQuotaNumber = origRole.getWaterDeviceQuota();        if (origRole.getForbidden()) {            throw new YimaoException("该经销商类型不允许升级！");        }        boolean flag;        //1-该等级可以补差价升级        if (origRole.getUpgrade()) {//是否可以补差价升级：0-否；1-是；            //经销商当前身份完成时间对比，未超时补差价，超时全额            Integer validityTime = origRole.getUpgradeLimitDays();            //1.1-是否有补差价期限            if (validityTime == null || validityTime == 0) {                //1.1.1-没有补差价期限 直接补差额                quotaNumber = destRole.getWaterDeviceQuota() - origRole.getWaterDeviceQuota();                destPrice = destRole.getPrice().subtract(origRole.getPrice());            } else {                //1.1.2-有补差价期限 判断是否超过期限                flag = upgradeValidityTime(validityTime, distributor);                //没有过期补两个等级的差额                if (flag) {                    quotaNumber = destRole.getWaterDeviceQuota() - origQuotaNumber;                    destPrice = destRole.getPrice().subtract(origRole.getPrice());                } else {                    quotaNumber = destRole.getWaterDeviceQuota();                    destPrice = destRole.getPrice();                }            }        } else {            //该等级不可以补差价升级，给全额            //升级后经销商类型的配额            quotaNumber = destRole.getWaterDeviceQuota();            destPrice = destRole.getPrice();        }        DistributorOrder distributorOrder = new DistributorOrder(orderDTO);        //赋值服务站信息        distributorOrderSetStationCompanyIdAndName(distributorOrder, distributor.getProvince(), distributor.getCity(), distributor.getRegion());        distributorOrder.setMobile(distributor.getPhone()); //获取经销商手机号        distributorOrder.setId(UUIDUtil.buildRegisterWorkOrderId());        distributorOrder.setPrice(destPrice);        distributorOrder.setQuotaNumber(quotaNumber);        //冗余字段 审核导出需要        distributorOrder.setRecommendId(distributor.getRecommendId());        distributorOrder.setRecommendName(distributor.getRecommendName());        distributorOrder.setDistributorIdCard(distributor.getIdCard());        distributorOrder.setProvince(distributor.getProvince());        distributorOrder.setCity(distributor.getCity());        distributorOrder.setRegion(distributor.getRegion());        distributorOrder.setAddress(distributor.getAddress());        distributorOrder.setRealName(distributor.getRealName());        //设置区域ID，站务系统用此字段区分所属服务站        Integer areaId = redisCache.get(Constant.AREA_CACHE + distributor.getProvince() + "_" + distributor.getCity() + "_" + distributor.getRegion(), Integer.class);        if (areaId == null) {            areaId = systemFeign.getRegionIdByPCR(distributor.getProvince(), distributor.getCity(), distributor.getRegion());        }        distributorOrder.setAreaId(areaId);        if (DistributorRoleLevel.D_950.value == orderDTO.getDestRoleLevel()) {            if (orderDTO.getUserCompanyApply() == null) {                throw new YimaoException("升级企业版本需要填写企业资料！");            }            distributorOrder.setEnterpriseState(EnterpriseStateEnum.UN_AUDIT.value);            //创建企业申请信息（后台详情需要）            UserCompanyApply userCompanyApply = new UserCompanyApply(orderDTO.getUserCompanyApply());            userCompanyApply.setCreateTime(new Date());            userCompanyApply.setOrderId(distributorOrder.getId());            userCompanyApplyService.insert(userCompanyApply);            //升级到企业需要企业审核,其它类型无需审核            distributorOrder.setEnterpriseState(EnterpriseStateEnum.UN_AUDIT.value);        } else {            distributorOrder.setEnterpriseState(EnterpriseStateEnum.NO_NEED_AUDIT.value);        }        distributorOrder.setPayState(PayStateEnum.UN_PAY.value);        //distributorOrder.setPayTime(new Date());        distributorOrder.setRoleId(origRole.getId());        distributorOrder.setRoleLevel(origRole.getLevel());        distributorOrder.setDestRoleId(destRole.getId());        distributorOrder.setDestRoleLevel(destRole.getLevel());       /* //线下支付需要财务审核        if (DistributorOrderPayTypeEnum.BANK_TRANSFER.value == distributorOrder.getPayType() || DistributorOrderPayTypeEnum.POS.value == distributorOrder.getPayType()) {            distributorOrder.setFinancialState(FinancialStateEnum.UN_AUDIT.value);            distributorOrder.setOrderState(DistributorOrderStateEnum.WAITING_AUDIT.value);        } else {            distributorOrder.setFinancialState(FinancialStateEnum.NO_NEED_AUDIT.value);            distributorOrder.setOrderState(DistributorOrderStateEnum.PENDING_PAYMENT.value);        }*/        distributorOrder.setOrderState(DistributorOrderStateEnum.PENDING_PAYMENT.value);        distributorOrder.setDistributorAccount(distributor.getUserName());        distributorOrder.setCreateTime(new Date());        distributorOrderMapper.insert(distributorOrder);        resultMap.put("orderId", distributorOrder.getId().toString());        return resultMap;    }    /**     * 经销商订单赋值服务站公司id以及服务站公司名称     *     * @param distributorOrder 经销商订单     * @param province         经销商省     * @param city             经销商市     * @param region           经销商区     */    private void distributorOrderSetStationCompanyIdAndName(DistributorOrder distributorOrder, String province, String city, String region) {        //查询有售前权限的服务站公司    	StationCompanyDTO stationCompanyDTO = systemFeign.getStationCompanyByPCR(province, city, region, StationAreaServiceTypeEnum.PRE_SALE.value);        if (stationCompanyDTO == null) {            throw new YimaoException("服务站未绑定对应的服务站公司");        }        distributorOrder.setStationCompanyId(stationCompanyDTO.getId());        distributorOrder.setStationCompanyName(stationCompanyDTO.getName());    }    /**     * 续费经销商订单     *     * @param orderDTO     * @return     * @author Liu Yi     * @date 2019/1/9     */    @Override    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)    public Map<String, Object> renewOrder(DistributorOrderDTO orderDTO) {        if (orderDTO == null) {            throw new YimaoException("缺少经销商订单信息！");        }        if (orderDTO.getOrderType() == null) {            throw new YimaoException("缺少经销商订单类型参数！");        }        if (DistributorOrderType.RENEW.value != orderDTO.getOrderType()) {//订单类型/0-注册、1-升级、2-续费            throw new YimaoException("订单类型有误！");        }        if (orderDTO.getOrderSouce() == null) {            throw new YimaoException("缺少经销商订单来源参数！");        }        if (orderDTO.getDistributorId() == null) {            throw new YimaoException("缺少经销商信息参数！");        }        if (orderDTO.getRoleLevel() == null) {            throw new YimaoException("缺少续费经销商类型信息！");        }        Distributor distributor = distributorMapper.selectByPrimaryKey(orderDTO.getDistributorId());        if (distributor == null) {            throw new YimaoException("经销商信息不存在！");        }        Map<String, Object> resultMap = new HashMap<>();        //查询该用户未完成的订单        List<DistributorOrderDTO> unfinishedRenewOrder = listByDistributorAccount(distributor.getUserName(), DistributorOrderType.RENEW.value);        if (CollectionUtil.isNotEmpty(unfinishedRenewOrder)) {            log.info("用户还有未完成的续费订单，直接返回老订单号");            resultMap.put("orderId", unfinishedRenewOrder.get(0).getId().toString());//一般情况下最多只会有一个未完成的续费订单            return resultMap;        }        DistributorRoleDTO origRole = distributorRoleService.getByLevel(orderDTO.getRoleLevel());        if (origRole == null) {            throw new YimaoException("续费经销商类型不存在!");        }        //个人和企业版本才允许续费        if (DistributorRoleLevel.D_650.value != origRole.getLevel() && DistributorRoleLevel.D_950.value != origRole.getLevel()) {            throw new YimaoException("该经销商类型不可以续费!");        }        //判断是否限制续费次数        if (origRole.getRenewLimit()) {            //经销商id查询该等级订单续费次数>该角色配置次数不允许续费            List<DistributorOrder> list = distributorOrderMapper.listDistributorOrder(orderDTO.getDistributorId(), DistributorOrderType.RENEW.value, orderDTO.getRoleLevel());            if (list != null && list.size() > 0 && origRole.getRenewLimitTimes() <= list.size()) {                throw new YimaoException("续费次数超过该等级可续费次数！");            }        }        DistributorOrder distributorOrder = new DistributorOrder(orderDTO);        //赋值服务站信息        distributorOrderSetStationCompanyIdAndName(distributorOrder, distributor.getProvince(), distributor.getCity(), distributor.getRegion());        distributorOrder.setMobile(distributor.getPhone());        distributorOrder.setId(UUIDUtil.buildRegisterWorkOrderId());        distributorOrder.setRoleId(origRole.getId());        distributorOrder.setRoleLevel(origRole.getLevel());        distributorOrder.setPrice(origRole.getPrice());        distributorOrder.setQuotaNumber(origRole.getWaterDeviceQuota());        distributorOrder.setPayState(PayStateEnum.UN_PAY.value);        //冗余字段 审核导出需要        distributorOrder.setRecommendId(distributor.getRecommendId());        distributorOrder.setRecommendName(distributor.getRecommendName());        distributorOrder.setDistributorIdCard(distributor.getIdCard());        distributorOrder.setProvince(distributor.getProvince());        distributorOrder.setCity(distributor.getCity());        distributorOrder.setRegion(distributor.getRegion());        distributorOrder.setAddress(distributor.getAddress());        distributorOrder.setRealName(distributor.getRealName());        //设置区域ID，站务系统用此字段区分所属服务站        Integer areaId = redisCache.get(Constant.AREA_CACHE + distributor.getProvince() + "_" + distributor.getCity() + "_" + distributor.getRegion(), Integer.class);        if (areaId == null) {            areaId = systemFeign.getRegionIdByPCR(distributor.getProvince(), distributor.getCity(), distributor.getRegion());        }        distributorOrder.setAreaId(areaId);        //线下支付需要财务审核        /*if (DistributorOrderPayTypeEnum.BANK_TRANSFER.value == distributorOrder.getPayType() || DistributorOrderPayTypeEnum.POS.value == distributorOrder.getPayType()) {            distributorOrder.setFinancialState(FinancialStateEnum.UN_AUDIT.value);            distributorOrder.setOrderState(DistributorOrderStateEnum.WAITING_AUDIT.value);        } else {*/        //distributorOrder.setFinancialState(FinancialStateEnum.NO_NEED_AUDIT.value);        distributorOrder.setOrderState(DistributorOrderStateEnum.PENDING_PAYMENT.value);        //}        distributorOrder.setEnterpriseState(EnterpriseStateEnum.NO_NEED_AUDIT.value);        //distributorOrder.setCompletionTime(new Date());        distributorOrder.setDistributorAccount(distributor.getUserName());        distributorOrder.setCreateTime(new Date());        distributorOrderMapper.insert(distributorOrder);        resultMap.put("orderId", distributorOrder.getId().toString());        return resultMap;    }    /**     * 获取升级价格     *     * @param origLevel     * @param destLevel     * @param distributorId 经销商id     * @return     * @author Liu Yi     * @date 2019/1/9     */    public BigDecimal getOrderPrice(Integer origLevel, Integer destLevel, Integer distributorId, Integer orderType) {        if (origLevel == null) {            throw new YimaoException("缺少原经销商类型信息！");        }        DistributorRoleDTO origRole = distributorRoleService.getByLevel(origLevel);        if (origRole == null) {            throw new YimaoException("原经销商类型不存在！");        }        if (orderType == null) {            throw new YimaoException("订单类型必填！");        }        //订单类型:0-注册、1-升级、2-续费        if (orderType == DistributorOrderType.REGISTER.value || orderType == DistributorOrderType.RENEW.value) {            return origRole.getPrice() == null ? new BigDecimal(0) : origRole.getPrice();        }        DistributorDTO dto = distributorService.getBasicInfoById(distributorId);        if (dto == null) {            throw new YimaoException("经销商不存在！");        }        Distributor distributor = new Distributor(dto);        if (origRole.getForbidden()) {            throw new YimaoException("该经销商类型不允许升级！");        }        if (destLevel == null) {            throw new YimaoException("缺少升级经销商类型信息！");        }        DistributorRoleDTO destRole = distributorRoleService.getByLevel(destLevel);        if (destRole == null) {            throw new YimaoException("升级经销商类型不存在！");        }        if (origRole.getForbidden()) {            throw new YimaoException("该经销商类型不允许升级！");        }        //原经销商类型的价格        BigDecimal origPrice = origRole.getPrice() == null ? new BigDecimal(0) : origRole.getPrice();        //升级经销商价格        BigDecimal destPrice = destRole.getPrice() == null ? new BigDecimal(0) : destRole.getPrice();        boolean flag;        //1-该等级可以补差价升级        if (origRole.getUpgrade()) {//是否可以补差价升级：0-否；1-是；            //经销商当前身份完成时间对比，未超时补差价，超时全额            Integer validityTime = origRole.getUpgradeLimitDays();            //1.1-是否有补差价期限            if (validityTime == null || validityTime == 0) {                //1.1.1-没有补差价期限 直接补差额                return destPrice.subtract(origPrice);            } else {                //1.1.2-有补差价期限 判断是否超过期限                flag = upgradeValidityTime(validityTime, distributor);                //没有过期补两个等级的差额                if (flag) {                    return destPrice.subtract(origPrice);                } else {                    return destPrice;                }            }        } else {            //该等级不可以补差价升级，给全额            //升级后经销商类型的配额            return destPrice;        }    }    /**     * 判断有效期有没有过期     *     * @param validityTime     * @param distributor     * @return     * @author Liu Yi     * @date 2019/1/9     */    @Override    public boolean upgradeValidityTime(Integer validityTime, Distributor distributor) {        if (distributor == null) {            throw new YimaoException("经销商信息不存在！");        }        //获取经销商成为该经销商类型的时间        Date completionTime = distributor.getCompleteTime();        //TODO 老数据如何确定成为经销商身份的时间 直接放行？        if (completionTime == null) {            return false;        }        Calendar c1 = Calendar.getInstance();        Calendar c2 = Calendar.getInstance();        c1.setTime(new Date());        c2.setTime(completionTime);        c2.add(Calendar.DATE, validityTime);        //判断当前身份需要判断有效期，过期返回false        if (c1.after(c2)) {            return false;        }        return true;    }    /**     * @param     * @return void     * @description 注册类型订单     * @author Liu Yi     * @date 2019/8/21 10:38     */    public Map<String, Object> registerOrder(DistributorOrder distributorOrder, String mobile, UserCompanyApplyDTO userCompanyApplyDTO, String creator) {        //查询当前登录用户未完成的注册订单        List<DistributorOrderDTO> unfinishedRegisterOrder = unfinishedOrderListByCreator(null);        if (CollectionUtil.isNotEmpty(unfinishedRegisterOrder)) {            Long orderId = unfinishedRegisterOrder.get(0).getId();//一般情况下只会有一个未完成的注册订单            //获取用户申请信息            UserDistributorApply query = new UserDistributorApply();            query.setOrderId(orderId);            UserDistributorApply userDistributorApply = userDistributorApplyMapper.selectOne(query);            if (userDistributorApply == null) {                throw new BadRequestException("注册订单不存在对应的注册经销商申请信息，请退出重试");            }            if (userDistributorApply.getPhone().equals(mobile.trim())) { //判断用户本次输入的手机号是否与上一次一致                //一致，沿用上一个订单                if (distributorOrder.getRoleLevel() == DistributorRoleLevel.D_950.value) {                    //注册为企业版经销商需要上传企业申请信息                    UserCompanyApply queryUserCompanyApply = new UserCompanyApply();                    queryUserCompanyApply.setOrderId(orderId);                    UserCompanyApply userCompanyApply = userCompanyApplyMapper.selectOne(queryUserCompanyApply);                    if (userCompanyApply == null) {                        throw new BadRequestException("注册为企业版本的订单需要提交企业信息，请退出重试");                    }                    UserCompanyApply updateUserCompanyApply = BeanHelper.copyProperties(userCompanyApplyDTO, UserCompanyApply.class);                    updateUserCompanyApply.setOrderId(orderId);                    updateUserCompanyApply.setId(userCompanyApply.getId());                    updateUserCompanyApply.setUpdater(creator);                    updateUserCompanyApply.setUpdateTime(new Date());                    userCompanyApplyMapper.updateByPrimaryKeySelective(updateUserCompanyApply);                }                //直接返回老订单号                Map<String, Object> resultMap = new HashMap<>();                resultMap.put("orderId", orderId);                return resultMap;            } else {                //不一致，使之前的订单失效，创建新的订单                DistributorOrder update = new DistributorOrder();                update.setId(orderId);                update.setOrderState(DistributorOrderStateEnum.CLOSE.value);                distributorOrderMapper.updateByPrimaryKeySelective(update);            }        }        if (distributorOrder.getOrderSouce() == 0) {            //h5用户想要注册经销商账号，只能先注册体验版经销商，不能直接注册为微创、个人及企业，而后通过升级可升级为其他经销商,经销商app可以            if (DistributorRoleLevel.D_50.value != distributorOrder.getRoleLevel()) {                throw new BadRequestException("不能直接注册微创、个人及企业类型经销商！");            }        }        if (distributorOrder.getOrderType() != DistributorOrderType.REGISTER.value) {            throw new BadRequestException("订单类型有误！");        }        if (distributorOrder.getRoleLevel() == null) {            throw new BadRequestException("注册等级必填！");        }        DistributorRoleDTO distributorRole = distributorRoleService.getByLevel(distributorOrder.getRoleLevel());        if (distributorRole == null) {            throw new BadRequestException("注册等级有误！");        }        //生成注册订单        //赋值服务站信息        User user = userMapper.selectByPrimaryKey(distributorOrder.getCreator());        distributorOrderSetStationCompanyIdAndName(distributorOrder, user.getProvince(), user.getCity(), user.getRegion());        distributorOrder.setId(UUIDUtil.buildRegisterWorkOrderId());        //体验版本无需审核        if (DistributorRoleLevel.D_50.value == distributorOrder.getRoleLevel()) {            distributorOrder.setPayState(PayStateEnum.PAY.value);            distributorOrder.setPayTime(new Date());            distributorOrder.setFinancialState(FinancialStateEnum.NO_NEED_AUDIT.value);            distributorOrder.setEnterpriseState(EnterpriseStateEnum.NO_NEED_AUDIT.value);            //订单设置为完成            completeOrder(distributorOrder);        } else if (DistributorRoleLevel.D_950.value == distributorOrder.getRoleLevel()) {            distributorOrder.setEnterpriseState(EnterpriseStateEnum.UN_AUDIT.value);            distributorOrder.setPayState(PayStateEnum.UN_PAY.value);            distributorOrder.setOrderState(DistributorOrderStateEnum.PENDING_PAYMENT.value);        } else {            distributorOrder.setEnterpriseState(EnterpriseStateEnum.NO_NEED_AUDIT.value);            distributorOrder.setPayState(PayStateEnum.UN_PAY.value);            distributorOrder.setOrderState(DistributorOrderStateEnum.PENDING_PAYMENT.value);        }        if (distributorRole.getPrice() == null) {            distributorOrder.setPrice(new BigDecimal(0));        } else {            distributorOrder.setPrice(distributorRole.getPrice());        }        distributorOrder.setQuotaNumber(distributorRole.getWaterDeviceQuota());        distributorOrder.setRoleId(distributorRole.getId());        distributorOrder.setRoleLevel(distributorRole.getLevel());        distributorOrder.setCreateTime(new Date());        int result = distributorOrderMapper.insert(distributorOrder);        if (result < 1) {            throw new YimaoException("经销商订单新增失败！");        }        return null;    }    /**     * 分页查询经销商订单  可带条件     *     * @param query     * @param pageNum     * @param pageSize     * @return     */    @Override    public PageVO<DistributorOrderDTO> page(DistributorOrderQueryDTO query, Integer pageNum, Integer pageSize) {        PageHelper.startPage(pageNum, pageSize);        Page<DistributorOrderDTO> page = distributorOrderMapper.pageQueryDistributorOrder(query);        return new PageVO<>(pageNum, page);    }    /**     * @param     * @return java.util.List<com.yimao.cloud.pojo.dto.user.DistributorOrderExportDTO>     * @description 导出经销商订单     * @author Liu Yi     * @date 2019/8/26 14:20     */    @Override    public List<DistributorOrderExportDTO> listOrderExport(DistributorOrderQueryDTO query) {        List<DistributorOrderExportDTO> list = distributorOrderMapper.listOrderExport(query);        if (CollectionUtil.isEmpty(list)) {            throw new NotFoundException("没有找到订单信息");        }        return list;    }    /**     * 更新经销商订单     *     * @param dto     * @return     */    public void submitCredential(Long id, Integer payType, String payCredential) {        if (id == null) {            throw new YimaoException("订单id不能为空");        }        //支付凭证校验        if (!Constant.IMAGE_PATTERN.matcher(payCredential).matches()) {            throw new BadRequestException("支付凭证格式不正确");        }        //订单信息        DistributorOrder order = distributorOrderMapper.selectByPrimaryKey(id);        if (order == null) {            throw new BadRequestException("订单不存在");        }        if (order.getPayState() == 2) {            throw new BadRequestException("订单已支付");        }        if (PayType.find(payType) == null) {            throw new BadRequestException("支付方式错误");        }        /*Integer userId = userCache.getUserId();        if (!Objects.equals(userId, order.getUserId())) {            throw new BadRequestException("非法操作");        }*/        DistributorOrder update = new DistributorOrder();        update.setId(id);        //支付类型：1-微信；2-支付宝；3-POS机；4-转账；        update.setOrderState(DistributorOrderStateEnum.WAITING_AUDIT.value);        update.setPayType(payType);        update.setPayState(4);        update.setFinancialState(FinancialStateEnum.UN_AUDIT.value);//财务审核状态/0-未审核、1-审核通过、2-审核不通过、3-无需审核        update.setPayRecord(payCredential);        Date now = new Date();        update.setPayTime(now);        update.setUpdateTime(now);        distributorOrderMapper.updateByPrimaryKeySelective(update);    }    /**     * 经销商订单详情     *     * @param     * @return     */    @Override    public DistributorOrderAllInfoDTO findDistributorOrderAllInfoByOrderId(Long orderId) {        if (orderId == null) {            throw new BadRequestException("订单id不能为空！");        }        //订单信息        DistributorOrderAllInfoDTO detailsDTO = distributorOrderMapper.getDistributorOrderById(orderId);        if (detailsDTO == null) {            throw new BadRequestException("订单不存在！");        }        if (detailsDTO.getDistributorId() != null) {            //经销商信息            DistributorDTO distributor = distributorMapper.getDistributorById(detailsDTO.getDistributorId());            if (distributor == null) {                throw new BadRequestException("经销商不存在！");            }            detailsDTO.setDistributor(distributor);            //推荐人信息            DistributorDTO referrerDistributor = distributorMapper.getDistributorReferrerById(distributor.getRecommendId());            if (referrerDistributor != null) {                detailsDTO.setReferrerDistributor(referrerDistributor);            }        }        //合同信息        DistributorProtocolDTO protocolDTO = distributorProtocolService.getDistributorProtocolByOrderId(orderId);        if (protocolDTO != null) {            detailsDTO.setDistributorProtocol(protocolDTO);        }        //财务审核信息        List<FinancialAuditDTO> financialAuditDTOList = financialAuditMapper.getFinancialAuditById(orderId);        if (CollectionUtil.isNotEmpty(financialAuditDTOList)) {            //获取最近一次的审核记录            FinancialAuditDTO financialAudit = financialAuditDTOList.get(0);            detailsDTO.setFinancialAudit(financialAudit);        }        //企业审核信息        UserCompanyApplyDTO userCompany = userCompanyApplyService.getCompanyByOrderId(orderId);        if (userCompany != null) {            detailsDTO.setUserCompany(userCompany);        }        return detailsDTO;    }    /**     * 经销商订单详情     *     * @param     * @return     */    @Override    public DistributorOrderDTO findBasicDistributorOrderById(Long orderId) {        if (orderId == null) {            throw new YimaoException("订单id不能为空");        }        //订单信息        DistributorOrder order = distributorOrderMapper.selectByPrimaryKey(orderId);        if (order == null) {            return null;        }        DistributorOrderDTO dto = new DistributorOrderDTO();        order.convert(dto);        //查询订单对应的经销商合同        DistributorProtocolDTO distributorProtocolDTO = distributorProtocolService.getDistributorProtocolByOrderId(dto.getId());        if (distributorProtocolDTO != null) {            //用户签署状态            dto.setUserSignState(distributorProtocolDTO.getUserSignState());        }        return dto;    }    /**     * 待办事项统计（企业信息审核，支付审核）     *     * @return Map     * @author hhf     * @date 2019/3/23     */    @Override    public Map<String, Long> distributorOrderOverview() {        Map<String, Long> map = new HashMap<>();        // 财务审核        map.put("financialAudit", countDistributorOrder("financialState"));        // 企业审核        map.put("enterpriseAudit", countDistributorOrder("enterpriseState"));        return map;    }    private Long countDistributorOrder(String type) {        Example example = new Example(DistributorOrder.class);        Example.Criteria criteria = example.createCriteria();        criteria.andEqualTo(type, 0);        criteria.andNotEqualTo("orderState", DistributorOrderStateEnum.CLOSE.value); //作废订单不展示        return (long) distributorOrderMapper.selectCountByExample(example);    }    /**     * @param     * @return java.util.List<com.yimao.cloud.user.po.DistributorOrder>     * @description 根据经销商账户查询经销商订单     * @author Liu Yi     * @date 14:53 2019/8/20     **/    @Override    public List<DistributorOrderDTO> listByDistributorAccount(String distributorAccount, Integer orderType) {        if (StringUtil.isBlank(distributorAccount)) {            throw new BadRequestException("经销商账户不能为空！");        }        Example example = new Example(DistributorOrder.class);        Example.Criteria criteria = example.createCriteria();        criteria.andEqualTo("distributorAccount", distributorAccount);        criteria.andEqualTo("orderType", orderType);        List<Integer> query = new ArrayList<>();        query.add(DistributorOrderStateEnum.PENDING_PAYMENT.value);//待付款        query.add(DistributorOrderStateEnum.WAITING_AUDIT.value);//待审核        criteria.andIn("orderState", query);        example.orderBy("createTime").desc();        List<DistributorOrder> list = distributorOrderMapper.selectByExample(example);        List<DistributorOrderDTO> dtoList = new ArrayList<>();        DistributorOrderDTO dto;        for (DistributorOrder order : list) {            dto = new DistributorOrderDTO();            order.convert(dto);            dtoList.add(dto);        }        return dtoList;    }    /**     * @param orderType        订单类型1-升级 2-续费     * @param distributorLevel 升级等级     * @return java.lang.String     * @description 获取经销商升级或者续费提示信息     * @author Liu Yi     * @date 2019/8/23 13:31     */    public String getDistributorOrderRemindMessage(Integer orderType, Integer distributorLevel) {        UserDTO userDTO = userMapper.selectBasicUserById(userCache.getUserId());        if (userDTO == null) {            throw new BadRequestException("经销商未登录！");        }        DistributorDTO distributorDTO = distributorService.getBasicInfoById(userDTO.getMid());        if (distributorDTO == null) {            throw new BadRequestException("经销商信息不存在！");        }        if (orderType == null) {            throw new BadRequestException("订单类型不能为空！");        }        if (orderType != DistributorOrderType.UPGRADE.value && orderType != DistributorOrderType.RENEW.value) {            throw new BadRequestException("订单类型错误！");        }        if (DistributorRoleLevel.D_1000.value == distributorDTO.getRoleLevel()) {            throw new BadRequestException("该经销商类型不可以升级和续费！");        }        StringBuffer sb = new StringBuffer();        Distributor distributor = new Distributor(distributorDTO);        Integer origLevel = distributorDTO.getRoleLevel();        if (origLevel == null) {            throw new BadRequestException("该经销商角色数据有误！");        }        DistributorRoleDTO origRole = distributorRoleService.getByLevel(origLevel);        if (origRole == null) {            throw new BadRequestException("原经销商类型为非法类型！");        }        Integer currentRemainingQuota = distributorDTO.getRemainingQuota();        Integer currentQuota = distributorDTO.getQuota();        Integer totalQuota;        Integer totalRemainingQuota;        if (orderType == DistributorOrderType.UPGRADE.value) {//升级            if (distributorLevel == null) {                throw new BadRequestException("升级类型必填！");            }            if (DistributorRoleLevel.D_950.value == origLevel) {                throw new BadRequestException("当前版本为最高版本，不可升级！");            }            DistributorRoleDTO destRole = distributorRoleService.getByLevel(distributorLevel);            if (destRole == null) {                throw new BadRequestException("升级类型不存在！");            }            //原经销商类型的价格            BigDecimal origPrice = origRole.getPrice() == null ? new BigDecimal(0) : origRole.getPrice();            //升级经销商价格            BigDecimal destPrice = destRole.getPrice() == null ? new BigDecimal(0) : destRole.getPrice();            totalQuota = currentQuota + destRole.getWaterDeviceQuota() - origRole.getWaterDeviceQuota();            totalRemainingQuota = currentRemainingQuota + destRole.getWaterDeviceQuota() - origRole.getWaterDeviceQuota();            Integer addTotalQuota = destRole.getWaterDeviceQuota() - origRole.getWaterDeviceQuota();            if (DistributorRoleLevel.D_50.value == origLevel) {                if (DistributorRoleLevel.D_350.value == distributorLevel) {                    sb.append("您好，您从体验版升级到微创版，需支付" + destPrice + "元，将新增" + addTotalQuota + "台配额（即升级后总配额"                            + totalQuota + "台,升级后剩余配额" + totalRemainingQuota + "台），和商城其它产品的经销权，如需要更多配额的代理权限，请尽快升级！");//体验升微创                } else if (DistributorRoleLevel.D_650.value == distributorLevel) {                    sb.append("您好，您从体验版升级到个人版，需支付" + destPrice + "元，将新增" + addTotalQuota                            + "台配额（即升级后总配额" + totalQuota + "台,升级后剩余配额" + totalRemainingQuota + "台），和商城其它产品的经销权，如需要更多配额的代理权限，请尽快升级！");//体验升个人                } else if (DistributorRoleLevel.D_950.value == distributorLevel) {                    sb.append("您好，您从体验版升级到企业版，需支付" + destPrice + "元，将新增" + addTotalQuota + "台配额（升级后总配额" + totalQuota                            + "台，升级后剩余配额" + totalRemainingQuota + "台），和商城其他产品经销权!");//体验升企业                }            } else if (DistributorRoleLevel.D_350.value == origLevel) {                if (DistributorRoleLevel.D_650.value == distributorLevel) {                    //升级后经销商类型的价格                    //经销商当前身份完成时间对比，未超时补差价，超时全额                    Integer validityTime = origRole.getUpgradeLimitDays();                    boolean flag = upgradeValidityTime(validityTime, distributor);                    if (flag) {                        //没有过期补两个等级的差额                        BigDecimal price = destPrice.subtract(origPrice);                        sb.append(" 您好，您在成为小微创业版的" + validityTime + "天有效期内升级到个人版，仅需支付" + price + "元，将新增" + addTotalQuota                                + "台配额（即：升级后总配额" + totalQuota + "台，升级后剩余配额" + totalRemainingQuota + "台）。如需要更多水机配额的代理权限，请尽快进行升级！");//微创升个人                    } else {                        //超过30天 补全额                        totalQuota = currentQuota + destRole.getWaterDeviceQuota();                        totalRemainingQuota = currentRemainingQuota + destRole.getWaterDeviceQuota();                        addTotalQuota = destRole.getWaterDeviceQuota();                        sb.append(" 您好，您从小微创业版升级到个人版，需支付" + destPrice + "元，将新增" + addTotalQuota                                + "台配额（即：升级后总配额" + totalQuota + "台，升级后剩余配额" + totalRemainingQuota + "台）。如需要更多水机配额的代理权限，请尽快进行升级！");//微创升个人过期                    }                } else if (DistributorRoleLevel.D_950.value == distributorLevel) {                    //小微升企业，补差额                    BigDecimal price = destPrice.subtract(origPrice);                    sb.append("您好，您从小微创业版升级到企业版，仅需支付" + price + "元，将增加" + addTotalQuota + "台水机配额（即：升级后总配额"                            + totalQuota + "台，升级后剩余配额" + totalRemainingQuota + "台），和商城其它产品的经销权，如需要更多配额的代理权限，请尽快升级！");//微创升企业                }            } else if (DistributorRoleLevel.D_650.value == origLevel) {                //个人升级企业补差价和补差额                if (DistributorRoleLevel.D_950.value == distributorLevel) {                    BigDecimal price = destPrice.subtract(origPrice);                    sb.append("您好，您从个人版升级到企业版，需支付" + price + "元，将新增" + addTotalQuota + "台配额（即升级后总配额" + totalQuota                            + "台,升级后剩余配额" + totalRemainingQuota + "台），和商城其它产品的经销权，如需要更多配额的代理权限，请尽快升级！");//个人升企业                }            }            if (sb.toString().length() <= 0) {                throw new YimaoException("该经销商类型升级类型有误!");            }        } else if (DistributorOrderType.RENEW.value == orderType) {//续费            if (DistributorRoleLevel.D_650.value != origLevel && DistributorRoleLevel.D_950.value != origLevel) {                throw new BadRequestException("该经销商类型不可以续费！");            }            totalQuota = currentQuota + origRole.getWaterDeviceQuota();            totalRemainingQuota = currentRemainingQuota + origRole.getWaterDeviceQuota();            if (DistributorRoleLevel.D_650.value == origLevel) {                sb.append(" 您好，您续费个人版经销商，需支付" + origRole.getPrice() + "元，将新增" + origRole.getWaterDeviceQuota()                        + "台水机配额（即：续费后总配额" + totalQuota + "台,续费后剩余配额" + totalRemainingQuota + "台），和商城其他产品经销权。");//续费个人版            } else if (DistributorRoleLevel.D_950.value == origLevel) {                sb.append(" 您好，您续费企业版经销商，需支付" + origRole.getPrice() + "元，将新增" + origRole.getWaterDeviceQuota()                        + "台水机配额（即：续费后总配额" + totalQuota + "台,续费后剩余配额" + totalRemainingQuota + "台），和商城其他产品经销权。");//续费企业版            }        }        return sb.toString();    }    /**     * @param distributorId 经销商id     * @return java.util.List<com.yimao.cloud.user.po.DistributorOrder>     * @description 根据创建人（经销商）查询未完成订单     * @author Liu Yi     * @date 14:53 2019/8/20     **/    public List<DistributorOrderDTO> unfinishedOrderListByCreator(Integer distributorId) {//        if (distributorId == null) {//            throw new BadRequestException("经销商账户不能为空！");//        }//        Distributor distributor = distributorMapper.selectByPrimaryKey(distributorId);//        if (distributor == null) {//            throw new YimaoException("经销商信息不存在");//        }        Integer userId = userCache.getUserId();        Example example = new Example(DistributorOrder.class);        Example.Criteria criteria = example.createCriteria();        criteria.andEqualTo("creator", userId);        List<Integer> query = new ArrayList<>();        query.add(DistributorOrderStateEnum.PENDING_PAYMENT.value);        query.add(DistributorOrderStateEnum.WAITING_AUDIT.value);        criteria.andIn("orderState", query);        example.orderBy("createTime").desc();        List<DistributorOrder> list = distributorOrderMapper.selectByExample(example);        if (list == null || list.size() <= 0) {            return null;        }        List<DistributorOrderDTO> dtoList = new ArrayList<>();        DistributorOrderDTO dto;        for (DistributorOrder order : list) {            dto = new DistributorOrderDTO();            order.convert(dto);            dtoList.add(dto);        }        return dtoList;    }    @Override    public String uploadBusinessLicenseImage(MultipartFile multipartFile) {        userCache.getUserId();        if (multipartFile == null) {            throw new BadRequestException("上传文件不能为空！");        }        long fileSize = multipartFile.getSize();        if (fileSize > 2 * 1024 * 1024) {            throw new YimaoException("文件大小不能超过2M");        }        try {            //文件合法性检查            String fileName = multipartFile.getOriginalFilename();            Pattern pattern = Pattern.compile(".*(.jpg|.JPG|.png|.PNG|.gif|.GIF)$");            Matcher matcher = pattern.matcher(fileName);            if (!matcher.matches()) {                throw new YimaoException("头像上传失败,图片格式不对！");            }            log.info("fileName ===" + fileName);            String imageUrl = SFTPUtil.upload(multipartFile.getInputStream(), "headImages", fileName, null);            if (StringUtil.isBlank(imageUrl)) {                throw new YimaoException("营业执照上传失败!");            }            return imageUrl;        } catch (YimaoException e) {            log.error("营业执照上传失败", e);            throw new YimaoException(e.getMessage());        } catch (Exception e) {            log.error("营业执照上传失败", e);            throw new YimaoException("营业执照上传失败！");        }    }    @Override    public void renewCommitCompanyApply(UserCompanyApplyDTO dto) {        if (dto == null) {            throw new NoLoginException();        }        if (dto.getOrderId() == null) {            throw new BadRequestException("订单id不能为空！");        }        //获取订单id所对应的原本的企业申请信息        Example example = new Example(UserCompanyApply.class);        Example.Criteria criteria = example.createCriteria();        criteria.andEqualTo("orderId", dto.getOrderId());        UserCompanyApply userCompanyApply = userCompanyApplyMapper.selectOneByExample(example);        if (userCompanyApply == null) {            throw new BadRequestException("订单没有对应的企业申请信息！");        }        //将id赋给dto        dto.setId(userCompanyApply.getId());        DistributorOrder distributorOrder = distributorOrderMapper.selectByPrimaryKey(dto.getOrderId());        if (distributorOrder == null) {            throw new BadRequestException("订单不存在！");        }        if (distributorOrder.getOrderState() == 1) {            throw new BadRequestException("该订单已完成不可修改企业信息！");        }        userCompanyApplyService.update(dto);        distributorOrder.setEnterpriseState(EnterpriseStateEnum.UN_AUDIT.value);        distributorOrderMapper.updateByPrimaryKeySelective(distributorOrder);    }    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)    @Override    public void distributorOrderPayCallback(PayRecordDTO record) {        log.info("订单支付成功之后的后续操作，订单号为：" + record.getMainOrderId());        Long orderId = Long.parseLong(record.getMainOrderId());        DistributorOrder order = distributorOrderMapper.selectByPrimaryKey(orderId);        if (order == null) {            log.error("经销商订单支付回调失败。renewOrderId={}", orderId);            return;        }        if (PayStateEnum.PAY.value == order.getPayState()) {            log.info("经销商订单支付回调失败。重复调用已支付的经销商订单");            return;        }        order.setPayType(record.getPayType());        order.setPayState(PayStateEnum.PAY.value);        order.setPayTime(new Date());        order.setFinancialState(FinancialStateEnum.NO_NEED_AUDIT.value);        order.setTradeNo(record.getTradeNo());        //如何无需企业审核，尝试去完成订单 （合同未签署放行）        if (order.getEnterpriseState() == EnterpriseStateEnum.NO_NEED_AUDIT.value || order.getEnterpriseState() == EnterpriseStateEnum.PASS_AUDIT.value) {            if (order.getOrderType() == DistributorOrderType.REGISTER.value) {//0-注册、1-升级、2-续费                finishRegisterOrder(order);            } else if (order.getOrderType() == DistributorOrderType.UPGRADE.value) {                finishUpgradeOrder(order);            } else if (order.getOrderType() == DistributorOrderType.RENEW.value) {                finishRenewOrder(order);            }        }        distributorOrderMapper.updateByPrimaryKeySelective(order);        if (order.getOrderState() == DistributorOrderStateEnum.COMPLETED.value) { //订单完成才进行收益分配            try {                DistributorOrderDTO distributorOrderDTO = new DistributorOrderDTO();                order.convert(distributorOrderDTO);                DistributorDTO distributorDTO = distributorService.getBasicInfoById(order.getDistributorId());                distributorOrderDTO.setDistributor(distributorDTO);                User user = userMapper.selectByPrimaryKey(distributorDTO.getUserId());                UserDTO userDTO = new UserDTO();                userInfoConvert(user, userDTO);                distributorOrderDTO.setUser(userDTO);                DistributorDTO recommendDistributor = distributorService.getRecommendByDistributorId(distributorDTO.getId());                distributorOrderDTO.setRecommendDistributor(recommendDistributor);                //招商收益分配                orderFeign.serviceAllot(distributorOrderDTO);            } catch (Exception e) {                throw new YimaoException("招商收益分配失败，经销商订单id：" + orderId);            }        }    }    /**     * @param order     * @return void     * @description 完成注册订单(体验版本无需校验)     * @author Liu Yi     * @date 2019/9/17 16:29     */    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)    @Override    public void finishRegisterOrder(DistributorOrder order) {        if (order.getEnterpriseState() == EnterpriseStateEnum.UN_AUDIT.value || order.getEnterpriseState() == EnterpriseStateEnum.UN_PASS_AUDIT.value                || order.getFinancialState() == FinancialStateEnum.UN_AUDIT.value || order.getFinancialState() == FinancialStateEnum.UN_PASS_AUDIT.value) {            //如果财务审核或企业审核还未完成，则直接拦截操作            throw new YimaoException("财务审核或企业审核还未完成，不能完成注册订单！");        }        DistributorProtocolDTO protocol = distributorProtocolService.getDistributorProtocolByOrderId(order.getId());        DistributorProtocol update = null;        if (protocol != null) {            update = new DistributorProtocol(protocol);        }        //合同状态 0-未完成，1-已完成        if ((order.getFinancialState() == FinancialStateEnum.PASS_AUDIT.value || order.getFinancialState() == FinancialStateEnum.NO_NEED_AUDIT.value) && protocol.getUserSignState() == DistributorProtocolSignStateEnum.SIGN.value) {            //判断流程是否完成            if (DistributorRoleLevel.D_950.value == order.getRoleLevel()) {                if (order.getEnterpriseState() == EnterpriseStateEnum.PASS_AUDIT.value || order.getEnterpriseState() == EnterpriseStateEnum.NO_NEED_AUDIT.value) {                    //订单设置为完成                    completeOrder(order);                    //订单完成后翼猫自动签署合同                    yimaoSignProtocol(order, update);                    //订单完成生成经销商信息并发送账号和密码给用户                    UserDistributorApply apply = new UserDistributorApply();                    apply.setOrderId(order.getId());                    apply = userDistributorApplyMapper.selectOne(apply);                    distributorService.insertDistributor(apply, order);                }            } else {                //订单设置为完成                completeOrder(order);                if (order.getRoleLevel() == DistributorRoleLevel.D_350.value) {                    //设置升级剩余有效期                    setUpgradeResidualValidity(order, order.getRoleLevel());                }                //订单完成后翼猫自动签署合同                yimaoSignProtocol(order, update);                //订单完成生成经销商信息并发送账号和密码给用户                UserDistributorApply apply = new UserDistributorApply();                apply.setOrderId(order.getId());                apply = userDistributorApplyMapper.selectOne(apply);                distributorService.insertDistributor(apply, order);            }        }    }    private void setUpgradeResidualValidity(DistributorOrder order, Integer roleLevel) {        if (order == null) {            throw new YimaoException("订单不能为空");        }        if (roleLevel == null) {            throw new YimaoException("经销商类型不能为空");        }        DistributorRoleDTO role = distributorRoleService.getByLevel(roleLevel);        if (role == null) {            throw new YimaoException("经销商类型不存在!");        }        order.setPeriodValidity(role.getUpgradeLimitDays());    }    /**     * @param     * @return void     * @description 完成升级订单     * @author Liu Yi     * @date 2019/9/16 14:48     */    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)    @Override    public void finishUpgradeOrder(DistributorOrder order) {        if (order.getEnterpriseState() == EnterpriseStateEnum.UN_AUDIT.value || order.getEnterpriseState() == EnterpriseStateEnum.UN_PASS_AUDIT.value                || order.getFinancialState() == FinancialStateEnum.UN_AUDIT.value || order.getFinancialState() == FinancialStateEnum.UN_PASS_AUDIT.value) {            //如果财务审核或企业审核还未完成，则直接拦截操作            throw new YimaoException("财务审核或企业审核还未完成，不能完成升级订单！");        }        DistributorProtocolDTO protocol = distributorProtocolService.getDistributorProtocolByOrderId(order.getId());        DistributorProtocol update = null;        if (protocol != null) {            update = new DistributorProtocol(protocol);        }        //升级企业版本        if (DistributorRoleLevel.D_950.value == order.getDestRoleLevel()) {            //判断企业信息是否审核通过            if (order.getEnterpriseState() == EnterpriseStateEnum.PASS_AUDIT.value || order.getEnterpriseState() == EnterpriseStateEnum.NO_NEED_AUDIT.value) {                //体验升企业 需要签署合同                if (DistributorRoleLevel.D_50.value == order.getRoleLevel() && protocol.getUserSignState() == DistributorProtocolSignStateEnum.SIGN.value) {                    //订单设置为完成                    completeOrder(order);                    //订单完成后翼猫自动签署合同                    yimaoSignProtocol(order, update);                    updateDistributorQuota(order);//更新设备配额 和经销商用户信息                }                //微创升企业无需签署合同                if (DistributorRoleLevel.D_350.value == order.getRoleLevel()) {//微创升企业无需签署合同                    //订单设置为完成                    completeOrder(order);                    updateDistributorQuota(order);//更新设备配额 和经销商用户信息                }                //个人升企业 无需签署合同                if (DistributorRoleLevel.D_650.value == order.getRoleLevel()) {                    //订单设置为完成                    completeOrder(order);                    updateDistributorQuota(order); //更新设备配额 和经销商用户信息                }            }            if (order.getOrderState() == DistributorOrderStateEnum.COMPLETED.value) { //订单完成才进行下续操作                //如果是升级为企业版的订单，需要添加企业信息                Example example1 = new Example(UserCompanyApply.class);                Example.Criteria criteria1 = example1.createCriteria();                criteria1.andEqualTo("orderId", order.getId());                UserCompanyApply userCompanyApply = userCompanyApplyMapper.selectOneByExample(example1);                UserCompany userCompany = BeanHelper.copyProperties(userCompanyApply, UserCompany.class);                userCompany.setId(null);                userCompany.setCreateTime(new Date());                int count = userCompanyMapper.insertSelective(userCompany);                if (count != 1) {                    throw new YimaoException("新增企业信息失败！");                }                //升级为企业版经销商需要在经销商表中添加企业信息                //获取经销商                Distributor distributor = distributorMapper.selectByPrimaryKey(order.getDistributorId());                distributor.setCompanyId(userCompany.getId());                distributor.setCompanyName(userCompany.getCompanyName());                count = distributorMapper.updateByPrimaryKeySelective(distributor);                if (count != 1) {                    throw new YimaoException("修改经销商信息失败");                }                // //用户信息中添加企业信息                // User user = userMapper.selectByPrimaryKey(distributor.getUserId());                // user.setCompanyName(userCompany.getCompanyName());                // userMapper.updateByPrimaryKeySelective(user);            }        } else if (DistributorRoleLevel.D_650.value == order.getDestRoleLevel() && DistributorRoleLevel.D_350.value == order.getRoleLevel()) {            //TODO　微创升级到个人 （成为当前身份)30天内升级不需要签署合同 30天后需要签署合同(当前身份时间老数据如何处理)            DistributorRoleDTO origDistributorRole = distributorRoleService.getByLevel(order.getRoleLevel());            Distributor distributor = distributorMapper.selectByPrimaryKey(order.getDistributorId());            if (distributor == null) {                throw new YimaoException("经销商不存在！");            }            Integer validityTime = origDistributorRole.getUpgradeLimitDays();            boolean flag;            if (validityTime != null && validityTime != 0) {                flag = upgradeValidityTime(validityTime, distributor);                //过期需要签合同                if (!flag) {                    //判断用户有没有签署合同                    if (protocol.getUserSignState() == DistributorProtocolSignStateEnum.SIGN.value) {//合同状态 0-未完成，1-已完成                        //订单设置为完成                        completeOrder(order);                        //订单完成后翼猫自动签署合同                        yimaoSignProtocol(order, update);                        //更新设备配额 和经销商用户信息                        updateDistributorQuota(order);                    }                } else {                    //未过期，无需签署合同，订单设置为完成                    completeOrder(order);                    //更新设备配额 和经销商用户信息                    updateDistributorQuota(order);                }            }        } else {            //判断用户有没有签署合同            if (protocol.getUserSignState() == DistributorProtocolSignStateEnum.SIGN.value) {//合同状态 0-未完成，1-已完成                //订单设置为完成                completeOrder(order);                //订单完成后翼猫自动签署合同                yimaoSignProtocol(order, update);                //更新设备配额 和经销商用户信息                updateDistributorQuota(order);                //升级为微创版的经销商，订单完成后需要设置升级剩余有效时间                if (DistributorRoleLevel.D_350.value == order.getDestRoleLevel()) {                    //设置升级剩余有效期                    setUpgradeResidualValidity(order, order.getDestRoleLevel());                }            }        }        if (order.getOrderState() == DistributorOrderStateEnum.COMPLETED.value) { //订单完成才进行下续操作            //更新升级订单支付信息            distributorOrderMapper.updateByPrimaryKeySelective(order);            //体验版经销商升级之后需要把收益结算数据的状态修改为“可结算”，和结算月份            if (DistributorRoleLevel.D_50.value == order.getRoleLevel()) {                rabbitTemplate.convertAndSend(RabbitConstant.DISTRIBUTOR_UPGRADE_INCOME_STATUS, order.getDistributorId());            }            //保存升级记录            saveUserChangeRecord(order);        }    }    private void completeOrder(DistributorOrder order) {        if (order == null) {            throw new YimaoException("订单不能为空");        }        order.setOrderState(DistributorOrderStateEnum.COMPLETED.value);        order.setCompletionTime(new Date());    }    /**     * 保存升级记录     */    private void saveUserChangeRecord(DistributorOrder order) {        if (order == null) {            throw new YimaoException("订单信息不能为空");        }        if (order.getOrderType() != DistributorOrderType.UPGRADE.value) {            throw new YimaoException("订单类型有误");        }        Distributor distributor = distributorMapper.selectByPrimaryKey(order.getDistributorId());        if (distributor == null) {            throw new YimaoException("经销商信息不存在");        }        UserChangeRecord changeRecord = new UserChangeRecord();        Date now = new Date();        changeRecord.setOrigUserId(distributor.getUserId());        changeRecord.setOrigDistributorId(distributor.getId());        changeRecord.setOrigAccount(distributor.getUserName());        changeRecord.setOrigPhone(distributor.getPhone());        changeRecord.setOrigUserType(DistributorRoleLevel.getUserType(order.getRoleLevel()));        changeRecord.setOrigDistributorType(order.getRoleLevel());        changeRecord.setDestUserId(distributor.getUserId());        changeRecord.setDestDistributorId(distributor.getId());        changeRecord.setDestAccount(distributor.getUserName());        changeRecord.setDestPhone(distributor.getPhone());        changeRecord.setDestUserType(DistributorRoleLevel.getUserType(order.getDestRoleLevel()));        changeRecord.setDestDistributorType(order.getDestRoleLevel());        changeRecord.setType(UserChangeRecordEnum.UPGRADE_EVENT.value); //升级        changeRecord.setTime(now);        changeRecord.setTerminal(CreateDistributorTerminal.APP.value); //经销商app        changeRecord.setAmount(order.getPrice());        changeRecord.setOrderId(order.getId());        changeRecord.setCreator(distributor.getRealName());        int count = userChangeMapper.insert(changeRecord);	    if (count < 1) {            throw new YimaoException("升级记录添加失败！");        }        //如果经销商原本是体验版经销商，则给当前经销商发起的工单“经销商第一次升级时间”字段赋值        if (order.getRoleLevel() == DistributorRoleLevel.D_50.value) {            Map<String, Object> info = new HashMap<>();            info.put("distributorId", order.getDistributorId());//经销商id            info.put("time", now); //体验版经销商第一次升级时间            // 给当前经销商发起的工单“经销商第一次升级时间”字段赋值            rabbitTemplate.convertAndSend(RabbitConstant.WORK_ORDER_SET_FIRST_UPGRADE_TIME, info);        }    }    /**     * @param     * @return void     * @description 完成续费订单     * @author Liu Yi     * @date 2019/9/16 14:48     */    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)    @Override    public void finishRenewOrder(DistributorOrder order) {        if (order.getEnterpriseState() == EnterpriseStateEnum.UN_AUDIT.value || order.getEnterpriseState() == EnterpriseStateEnum.UN_PASS_AUDIT.value                || order.getFinancialState() == FinancialStateEnum.UN_AUDIT.value || order.getFinancialState() == FinancialStateEnum.UN_PASS_AUDIT.value) {            //如果财务审核或企业审核还未完成，则直接拦截操作            throw new YimaoException("财务审核或企业审核还未完成，不能完成续费订单！");        }        DistributorProtocolDTO protocol = distributorProtocolService.getDistributorProtocolByOrderId(order.getId());        if (Objects.isNull(protocol)) {            throw new YimaoException("该续费订单没有合同信息！");        }        DistributorProtocol update = new DistributorProtocol(protocol);        //判断用户有没有签署合同        if (protocol.getUserSignState() == DistributorProtocolSignStateEnum.SIGN.value) {//合同状态 0-未完成，1-已完成            //订单设置为完成            completeOrder(order);            long startTime = System.currentTimeMillis();            //订单完成后翼猫自动签署合同            yimaoSignProtocol(order, update);            long endTime = System.currentTimeMillis();            log.info("访问云签操作总耗时：" + (endTime - startTime) + "毫秒");            //更新设备配额            updateDistributorQuota(order);            //更新续费订单支付信息            distributorOrderMapper.updateByPrimaryKeySelective(order);        }    }    /**     * 翼猫静默签署经销商合同     *     * @param order     * @param distributorProtocol     */    private void yimaoSignProtocol(DistributorOrder order, DistributorProtocol distributorProtocol) {        if (order == null) {            throw new YimaoException("订单不能不为空");        }        if (order.getId() == null) {            throw new YimaoException("订单id不能为空");        }        if (distributorProtocol == null) {            throw new YimaoException("合同实体类不能为空");        }        //翼猫静默签署经销商合同        rabbitTemplate.convertAndSend(RabbitConstant.DISTRIBUTOR_ORDER_PROTOCOL_YIMAO_SIGN, order.getId());        //翼猫静默签署成功，改变签署状态        distributorProtocol.setYmSignState(DistributorProtocolSignStateEnum.SIGN.value);        distributorProtocol.setYmSignTime(new Date());        distributorProtocolMapper.updateByPrimaryKeySelective(distributorProtocol);    }    /**     * @param     * @return void     * @description 升级和续费订单更新经销商配额和用户类型处理     * @author Liu Yi     * @date 2019/9/17 9:53     */    public void updateDistributorQuota(DistributorOrder order) {        if (order.getOrderType() != DistributorOrderType.UPGRADE.value && order.getOrderType() != DistributorOrderType.RENEW.value) {//订单类型:0-注册、1-升级、2-续费            throw new BadRequestException("订单类型有误！");        }        Distributor distributor = distributorMapper.selectByPrimaryKey(order.getDistributorId());        User user = userMapper.selectByPrimaryKey(distributor.getUserId());        Integer remainingQuota = distributor.getRemainingQuota();        Integer quota = distributor.getQuota();        Integer orderQuota = order.getQuotaNumber();        distributor.setQuota(quota + orderQuota);        distributor.setRemainingQuota(remainingQuota + orderQuota);        DistributorRoleDTO role;        if (order.getOrderType() == DistributorOrderType.UPGRADE.value) {//升级            role = distributorRoleService.getByLevel(order.getDestRoleLevel());            distributor.setRoleId(role.getId());            distributor.setRoleLevel(role.getLevel());            distributor.setRoleName(role.getName());            distributor.setCompleteTime(new Date());            //0-体验版经销商；1-微创版经销商；2-个人版经销商；3-分享用户；4-普通用户；5-企业版经销商（主）；6-企业版经销商（子）；7-分销用户；            if (DistributorRoleLevel.D_350.value == order.getDestRoleLevel()) {                user.setUserType(UserType.DISTRIBUTOR_350.value);                user.setUserTypeName(UserType.DISTRIBUTOR_50.name);            } else if (DistributorRoleLevel.D_650.value == order.getDestRoleLevel()) {                user.setUserType(UserType.DISTRIBUTOR_650.value);                user.setUserTypeName(UserType.DISTRIBUTOR_650.name);            } else if (DistributorRoleLevel.D_950.value == order.getDestRoleLevel()) {                user.setUserType(UserType.DISTRIBUTOR_950.value);                user.setUserTypeName(UserType.DISTRIBUTOR_950.name);            }            userMapper.updateByPrimaryKeySelective(user);        }        distributorMapper.updateByPrimaryKey(distributor);    }    /**     * 站务系统经销商订单统计     */    @Override    public FlowStatisticsDTO getDistributorOrderData(StatisticsQuery query) {        if (CollectionUtil.isEmpty(query.getAreas())) {            return null;        }        //经销商注册升级订单表格数据        List<FlowStatisticsDTO> distributorOrderRes = distributorOrderMapper.getDistributorOrderData(query);        //经销商注册升级订单统计图数据        List<FlowStatisticsDTO> distributorOrderPicRes = distributorOrderMapper.getDistributorOrderPicData(query);        //全部中的招商总数统计图数据        List<FlowStatisticsDTO> totalDistributorOrderPicRes = distributorOrderMapper.getTotalDistributorOrderPicData(query);        FlowStatisticsDTO res = new FlowStatisticsDTO();        res.setDistributorOrderRes(distributorOrderRes);        res.setDistributorOrderPicRes(distributorOrderPicRes);        res.setTotalDistributorOrderPicRes(totalDistributorOrderPicRes);        return res;    }    @Override    public PageVO<DistributorOrderVO> stationGetDistributorOrderInfo(DistributorOrderQueryDTO query, Integer pageNum, Integer pageSize) {        PageHelper.startPage(pageNum, pageSize);        Page<DistributorOrderVO> page = distributorOrderMapper.pageQueryDistributorOrderToStation(query);        return new PageVO<>(pageNum, page);    }	@Override	public SalesStatsResultDTO getInvestmentSalesStats(SalesStatsQueryDTO query) {		//获取当前经销商发展的所有经销商集合		SalesStatsResultDTO ssr=new SalesStatsResultDTO();		//设置查询参数		//setQueryParams(query);		//招商销售额(默认7天)		query.setDay(6);		List<SalesStatsDTO> investSalesList=distributorOrderMapper.getDistributorOrderSalesData(query);		completeData(investSalesList,query,7,12);		//获取各类型经销商增长个数(默认7天)		List<SalesStatsDTO> distributorIncreaseList=distributorOrderMapper.getDistributorIncreaseNumData(query);		//各类经销商占比(所有)		List<SalesStatsDTO> distributorPropList=distributorOrderMapper.getDistributorNumProp(query);		ssr.setInvestSalesList(investSalesList);		ssr.setDistributorIncreaseList(completeIncreaseData(distributorIncreaseList,query,7,6));		ssr.setDistributorPropList(completePropData(distributorPropList));		return ssr;	}	/****	 * 设置查询参数	 * @param query	 */	/*	 * private void setQueryParams(SalesStatsQueryDTO query) { //判断是查询个人还是公司销售统计	 * List<Integer> distributorIds=null; if(query.getType()==1) { //个人	 * distributorIds=userMapper.getDistributorByDistributId(query.getDistributorId(	 * )); if(!distributorIds.isEmpty()) { query.setIds(distributorIds); } }else	 * if(query.getType()==2) { //公司，根据经销商的省市区获取服务站公司 DistributorDTO	 * dd=distributorMapper.getDistInfoById(query.getDistributorId());	 * if(null==dd||StringUtil.isEmpty(dd.getProvince())||StringUtil.isEmpty(dd.	 * getCity())||StringUtil.isEmpty(dd.getRegion())) {	 * log.error("===========经销商信息不完整==========DistributorId:"+query.	 * getDistributorId()); throw new YimaoException("经销商信息错误"); } StationCompanyDTO	 * company=systemFeign.getStationCompanyByPCR(dd.getProvince(), dd.getCity(),	 * dd.getRegion()); if(company==null) {	 * log.error("===========经销商公司信息未找到==========DistributorId:"+query.	 * getDistributorId()); throw new YimaoException("经销商公司信息未找到"); }	 * query.setStationCompanyId(company.getId());     *	 *	 * }     *	 *	 * }	 */	/***     * 补足数据,比如30天的数据查出来只有5条，那么将其他25个日期补上     * @param investSalesList     * @param query     */    private void completeData(List<SalesStatsDTO> investSalesList, SalesStatsQueryDTO query,int day,int month) {        calculateDate(query,day,month);        if (query.getTimeType() == 1 || query.getTimeType() == 2) {            for (String date : query.getDates()) {                if (notExists(date, investSalesList)) {                	SalesStatsDTO statsRs = new SalesStatsDTO();                    statsRs.setCompleteTime(date);                    statsRs.setSaleAmount(BigDecimal.ZERO.setScale(2));                    statsRs.setIncreaseNum(0);                    investSalesList.add(statsRs);                }            }            //数据排序            Collections.sort(investSalesList, new Comparator<SalesStatsDTO>() {                @Override                public int compare(SalesStatsDTO u1, SalesStatsDTO u2) {                    long diff = DateUtil.transferStringToDate(query.getTimeType() == 2 ? u1.getCompleteTime() + "-01" : u1.getCompleteTime()).getTime()                    		- DateUtil.transferStringToDate(query.getTimeType() == 2 ? u2.getCompleteTime() + "-01" : u2.getCompleteTime()).getTime();                    if (diff > 0) {                        return 1;                    } else if (diff < 0) {                        return -1;                    } else {                        return 0;                    }                }            });        }    }    /***     * 计算日期集合     * @param query     * @param day 近几天     * @param month 近几月     */    private void calculateDate(SalesStatsQueryDTO query,int day, int month) {        List<String> dates = new ArrayList<String>();        dates.add(query.getCompleteTime());        if (query.getTimeType() == 1) {            //按日统计            for (int i = 1; i < day; i++) {                dates.add(DateUtil.getChangeDayByDate(DateUtil.transferStringToDate(query.getCompleteTime()), -i));            }        } else if (query.getTimeType() == 2) {            //按月统计            String time = query.getCompleteTime() + "-01";            for (int i = 1; i < month; i++) {                dates.add(DateUtil.getChangeMonthByDate(DateUtil.transferStringToDate(time), -i));            }        }        query.setDates(dates);    }    /***     * 校验数据是否存在     * @param date     * @param investSalesList     * @return     */    private boolean notExists(String date, List<SalesStatsDTO> investSalesList) {        if (investSalesList.isEmpty()) {            return true;        }        boolean flag = true;        for (SalesStatsDTO stats : investSalesList) {            if (!StringUtil.isEmpty(stats.getCompleteTime()) && stats.getCompleteTime().equals(date)) {                return false;            } else {                flag = true;            }        }        return flag;    }    /***     * 根据年月日统计招商销售额     */	@Override	public List<SalesStatsDTO> getInvestmentSalesAmountStats(SalesStatsQueryDTO query) {		//设置参数		//setQueryParams(query);		//招商销售额(默认7天)		query.setDay(6);		List<SalesStatsDTO> investSalesList=distributorOrderMapper.getDistributorOrderSalesData(query);		completeData(investSalesList,query,7,12);		return investSalesList;	}	@Override	public List<SalesStatsDTO> getDistributorIncreaseTrendStats(SalesStatsQueryDTO query) {		//设置参数		//setQueryParams(query);		//获取各类型经销商增长个数(默认7天)		List<SalesStatsDTO> distributorIncreaseList=distributorOrderMapper.getDistributorIncreaseNumData(query);		return completeIncreaseData(distributorIncreaseList,query,7,6);	}	private List<SalesStatsDTO> completeIncreaseData(List<SalesStatsDTO> distributorIncreaseList, SalesStatsQueryDTO query, int day,			int month) {		List<SalesStatsDTO> result = new ArrayList<SalesStatsDTO>();        if (query.getTimeType() == 1) {            //按日统计            for (int i = 0; i < day; i++) {            	initData(result,query,i);            }        } else if (query.getTimeType() == 2) {            //按月统计            for (int i = 0; i < month; i++) {            	initData(result,query,i);            }        }        if (query.getTimeType() == 1 || query.getTimeType() == 2) {        	if(!distributorIncreaseList.isEmpty()) {	            for (SalesStatsDTO date : result) {	                for (SalesStatsDTO ssd : distributorIncreaseList) {						if (ssd.getCompleteTime().equals(date.getCompleteTime())&&date.getDistributorType()==ssd.getDistributorType()) {							date.setIncreaseNum(ssd.getIncreaseNum());							break;						}					}	            }        	}        }        //数据排序        Collections.sort(result, new Comparator<SalesStatsDTO>() {            @Override            public int compare(SalesStatsDTO u1, SalesStatsDTO u2) {                long diff = DateUtil.transferStringToDate(query.getTimeType() == 2 ? u1.getCompleteTime() + "-01" : u1.getCompleteTime()).getTime()                		- DateUtil.transferStringToDate(query.getTimeType() == 2 ? u2.getCompleteTime() + "-01" : u2.getCompleteTime()).getTime();                if (diff > 0) {                    return 1;                } else if (diff < 0) {                    return -1;                } else {                    return 0;                }            }        });		return result;    }	//生成数据	private void initData(List<SalesStatsDTO> dates, SalesStatsQueryDTO query, int i) {		SalesStatsDTO ssdDto=new SalesStatsDTO();		String completeTime="";		if(query.getTimeType()==1) {			completeTime=DateUtil.getChangeDayByDate(DateUtil.transferStringToDate(query.getCompleteTime()), -i);		}else if(query.getTimeType()==2){			String time = query.getCompleteTime() + "-01";			completeTime=DateUtil.getChangeMonthByDate(DateUtil.transferStringToDate(time), -i);		}		ssdDto.setCompleteTime(completeTime);    	ssdDto.setDistributorType(DistributorRoleLevel.D_50.value);    	ssdDto.setDistributorTypeName("体验版");    	ssdDto.setIncreaseNum(0);    	dates.add(ssdDto);    	ssdDto=new SalesStatsDTO();    	ssdDto.setCompleteTime(completeTime);    	ssdDto.setDistributorType(DistributorRoleLevel.D_350.value);    	ssdDto.setDistributorTypeName("微创版");    	ssdDto.setIncreaseNum(0);    	dates.add(ssdDto);    	ssdDto=new SalesStatsDTO();    	ssdDto.setCompleteTime(completeTime);    	ssdDto.setDistributorType(DistributorRoleLevel.D_650.value);    	ssdDto.setDistributorTypeName("个人版");    	ssdDto.setIncreaseNum(0);    	dates.add(ssdDto);    	ssdDto=new SalesStatsDTO();    	ssdDto.setCompleteTime(completeTime);    	ssdDto.setDistributorType(DistributorRoleLevel.D_950.value);    	ssdDto.setDistributorTypeName("企业版");    	ssdDto.setIncreaseNum(0);    	dates.add(ssdDto);	}	@Override	public List<SalePerformRankDTO> getDistributorPerformRank(String startTime, String endTime) {		return distributorOrderMapper.getDistributorPerformRank(startTime, endTime);	}    /**     * @param     * @description 经销商app-经营报表-汇总统计     * @author Liu Yi     * @date 2020/4/27 15:21     */    public AgentSalesOverviewDTO getOrderSalesHomeReport(SalesStatsQueryDTO query) {        AgentSalesOverviewDTO salesStatsDTO = distributorOrderMapper.getOrderSalesHomeReport(query);        BigDecimal investmentSaleAmount = salesStatsDTO.getInvestmentRegistSaleFee().add(salesStatsDTO.getInvestmentRenewSaleFee()).add(salesStatsDTO.getInvestmentUpgradeSaleFee());        salesStatsDTO.setInvestmentTotalSaleFee(investmentSaleAmount);        return salesStatsDTO;    }    /**     * @param     * @description 经销商app-经营报表-累计销售金额统计表     * @author Liu Yi     * @date 2020/4/27 15:21     */    public List<SalesStatsDTO> getOrderSalesTotalReport(SalesStatsQueryDTO query) {        //招商销售额(默认30天)        query.setDay(29);        List<SalesStatsDTO> investSalesList = distributorOrderMapper.getDistributorOrderSalesData(query);        completeData(investSalesList, query, 30, 12);        return investSalesList;    }    @Override    public List<String> queryDistributorOrderTypeNames() {        List<RenewDTO> list = distributorOrderMapper.getOrderTypeName();        List<String> orderTypeNames = new ArrayList<>();        if(CollectionUtil.isNotEmpty(list)){            for(RenewDTO renewDTO : list){                orderTypeNames.add(renewDTO.getCategoryName());            }        }        return orderTypeNames;    }    /***     * 补全经销商占比数据     * @param distributorPropList     * @return     */    private List<SalesStatsDTO> completePropData(List<SalesStatsDTO> distributorPropList) {    	List<SalesStatsDTO> distributorPropData=new ArrayList<SalesStatsDTO>();    	SalesStatsDTO ssd=new SalesStatsDTO();    	ssd.setDistributorTypeName("企业版经销商");    	ssd.setDistributorNum(0);    	distributorPropData.add(ssd);    	ssd=new SalesStatsDTO();    	ssd.setDistributorTypeName("个人版经销商");    	ssd.setDistributorNum(0);    	distributorPropData.add(ssd);    	ssd=new SalesStatsDTO();    	ssd.setDistributorTypeName("微创版经销商");    	ssd.setDistributorNum(0);    	distributorPropData.add(ssd);    	ssd=new SalesStatsDTO();    	ssd.setDistributorTypeName("体验版经销商");    	ssd.setDistributorNum(0);    	distributorPropData.add(ssd);    	if (!distributorPropList.isEmpty()) {			for (SalesStatsDTO ss:distributorPropData) {				for(SalesStatsDTO rs:distributorPropList) {					if(rs.getDistributorTypeName().equals(ss.getDistributorTypeName())) {						ss.setDistributorNum(rs.getDistributorNum());						break;					}				}			}		}		return distributorPropData;	}        public static void main(String[] args) {    	 Calendar c1 = Calendar.getInstance();         Calendar c2 = Calendar.getInstance();         c1.setTime(new Date());         c2.setTime(DateUtil.stringToDate("2020-06-30 14:39:12"));         c2.add(Calendar.DATE, 0);         //判断当前身份需要判断有效期，过期返回false         System.out.println(c1.after(c2)); 			/*			 * if (c1.after(c2)) { return false; }			 */	}}